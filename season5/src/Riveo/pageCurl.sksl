uniform shader image;
uniform float pointer;
uniform float origin;
uniform vec2 resolution;

const float PI = 3.1415926535897932384626433832795;
const float r = 225.0;
vec4 color = vec4(0., 0., 0., 0.);

struct Paint {
  float4 color;
  bool stroke;
  float strokeWidth;
};

float sdLine(vec2 p, vec2 a, vec2 b) {
  vec2 pa = p - a;
  vec2 ba = b - a;
  float h = saturate(dot(pa, ba) / dot(ba, ba));
  return length(pa - ba * h);
}

float4 draw(float4 color, float d, Paint paint) {
  bool isFill = !paint.stroke && d < 0;
  bool isStroke = paint.stroke && abs(d) < paint.strokeWidth/2;
  if (isFill || isStroke) {
    return paint.color;
  }
  return color;
}

float4 drawLine(float4 color, float2 p, float2 a, float2 b, Paint paint) {
  float d = sdLine(p, a, b);
  return draw(color, d, paint);
}

vec4 main(float2 xy) {
  color = image.eval(xy);
  float dx = origin - pointer;
  float2 a = vec2(resolution.x - dx, resolution.y * 0.5);
  float2 b = vec2(resolution.x, resolution.y * 0.5);
  color = drawLine(color, xy, a, b, Paint(vec4(0.3, 0.6, 1., 1.), true, 10.));
  return color;
}